#!/usr/bin/env python3
##
# EPITECH PROJECT, 2021
# Mth_203hotline_2020
# File description:
# 203hotline
##

import sys
import math
import time

EMPLOYEES = 3500  # number of employees
HOURS = 8  # woking time
PHONES = 25  # phone number


def displayUsage():
    print("USAGE\n"
          "   ./203hotline [n k | d]\n\n"
          "DESCRIPTION\n"
          "    n      n value for the computation of C(n k)\n"
          "    k      k value for the computation of C(n k)\n"
          "    d      average duration of calls (in seconds)"
          )


def calBinomialTowInter(n: int, k: int) -> int:
    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))


def printDistribution(calls: int):
    proba = EMPLOYEES * (calls / (60 * 60 * HOURS))
    print("\nPoisson distribution:\n%d -> %.3f" %
          (0, math.exp(-proba) * (proba ** 0) / math.factorial(0)), end='')
    overload = 0

    timeStart = time.time()
    for i in range(1, 51):
        if i > 0 and i % 5 != 0:
            print(end='\t')
        result = math.exp(-proba) * (proba ** i) / math.factorial(i)
        print("%d -> %.3f" % (i, result), end='')
        if i > PHONES:
            overload += result
        if (i + 1) % 5 == 0:
            print(end='\n')
    if calls > 320:
        overload = 1
    timeEnd = time.time()

    print("\nOverload: %.1f" % (overload * 100) + "%")
    print("Computation time: %.2f ms" % ((timeEnd - timeStart) * 1000))


def printBinomialTowInter(n: int, k: int):
    print(str(k) + "-combinations of a set of size " +
          str(n) + ":\n%d" % calBinomialTowInter(n, k))


def printBinomialDistribution(calls: int):
    p = calls / (60 * 60 * HOURS)
    print("Binomial distribution:\n%d -> %.3f" % (0, 0), end='')
    overload = 0

    timeStart = time.time()
    for i in range(1, 51):
        if i > 0 and (i % 5) != 0:
            print(end='\t')
        result = math.comb(
            EMPLOYEES, i) * (p ** i) * ((1 - p) ** (EMPLOYEES - i))
        print("%d -> %.3f" % (i, result), end='')
        if i > PHONES:
            overload += result
        if (i + 1) % 5 == 0:
            print(end='\n')

    if calls > 320:
        overload = 1
    timeEnd = time.time()

    print("\nOverload: %.1f" % (overload * 100) + "%")
    print("Computation time: %.2f ms" % ((timeEnd - timeStart) * 1000))


def argsToIntegerNum(num: str):
    try:
        return int(num)
    except ValueError:
        sys.stderr.write("Invalid parameters, must to be intergade number\n")
        exit(84)


def main():
    ac = len(sys.argv)
    if ac == 2 and sys.argv[1] == "-h":
        displayUsage()
    elif ac == 2:
        printBinomialDistribution(argsToIntegerNum(sys.argv[1]))
        printDistribution(argsToIntegerNum(sys.argv[1]))
    elif ac == 3:
        printBinomialTowInter(argsToIntegerNum(
            sys.argv[1]), argsToIntegerNum(sys.argv[2]))
    else:
        sys.stderr.write("not acsept no parmeter!\n\n")
        displayUsage()
        exit(84)


if __name__ == "__main__":
    main()
