#!/usr/bin/env python3

import sys, os, math, csv
from sys import stdin
from math import factorial, sqrt, exp, pi

distribution_table = [
    [0, 99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 3, 1],
    [1, 0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
    [2, 0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
    [3, 0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34],
    [4, 0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 9.84, 11.34],
    [5, 0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 11.67, 13.28],
    [6, 0.7, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
    [7, 1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
    [8, 1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
    [9, 2.09, 4.17, 5.38, 6.39, 7.63, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67],
    [10, 2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]
]

def check_errors():
    arg = []
    i = 1
    try:
        while (i < len(sys.argv)):
            arg.append(int(sys.argv[i]))
            i += 1
    except:
        exit(84)
    if sum(arg) != 100 or len(arg) != 9:
        exit (84)
    if len(arg) < 1:
        exit(84)
    return arg

def facto(lim):
    result = 1
    i = 2

    while i <= lim:
        result *= i
        i += 1
    return result

def soustration(ox, tx):
    res = 0
    for i in range(0, len(ox)):
        res += pow(ox[i] - tx[i], 2) / tx[i]
    return res

def combinaison(n, k):
    num = facto(k)
    denum1 = facto(n)
    denum2 = facto(k - n)
    denum1 *= denum2
    return num / denum1

def param_loi_binomial(valeur_observer):
    res = 0
    for i in range(0, len(valeur_observer)):
        res += (i * valeur_observer[i])
    res /= 100 * 100
    return res

def check_correct(sum, degr):
    i = 1
    found = False
    while i != 13:
        if distribution_table[degr][i] <= sum <= distribution_table[degr][i + 1]:
            max = distribution_table[0][i]
            min = distribution_table[0][i + 1]
            found = True
            break
        i += 1
    if not found:
        if distribution_table[degr][1] <= sum:
            max = distribution_table[0][13]
            ret = 'P < ' + str(max) + '%'
            return ret
        if distribution_table[degr][13] >= sum:
            max = distribution_table[0][1]
            ret = 'P > ' + str(max) + '%'
            return ret

    ret = str(min) + '% < P < ' + str(max)+'%'
    return ret

def main_loop(tab, clean_scd_tab):
    incrementation = 0
    number = 0
    table_of_arg = []
    while number < len(tab):
        table_of_arg.append(str(incrementation))
        if number - 1 >= 0 and number + 1 < len(tab) and tab[number] < 10:
            if tab[number - 1] + tab[number] < tab[number + 1] + tab[number]:
                tab[number] += tab[number - 1]
                tab.pop(number - 1)
                table_of_arg[number - 1] += '-' + str(incrementation)
                incrementation += 1
                table_of_arg[number] = str(incrementation)
                clean_scd_tab[number] += clean_scd_tab[number - 1]
                clean_scd_tab.pop(number - 1)
                while tab[number - 1] < 10:
                    tab[number] += tab[number - 1]
                    tab.pop(number - 1)
                    if number < len(clean_scd_tab) - 1:
                        clean_scd_tab[number] += clean_scd_tab[number - 1]
                        clean_scd_tab.pop(number - 1)
                    table_of_arg[number - 1] += '-' + str(incrementation)
                    incrementation += 1
                    if incrementation < 9:
                        table_of_arg.append(str(incrementation))
                    table_of_arg.pop(number)
            else:
                clean_scd_tab[number] += clean_scd_tab[number + 1]
                clean_scd_tab.pop(number+1)
        number += 1
        incrementation += 1
    return tab, clean_scd_tab, table_of_arg, number, incrementation

def my_calc_tab(clean_table, table_of_arg, number, incrementation):
    if clean_table[len(clean_table) - 1] < 10:
        clean_table[number - 1] += clean_table[number - 2]
        clean_table.pop(number - 2)
        table_of_arg[number - 2] += '-' + str(incrementation - 1)
        table_of_arg.pop(number - 1)
        incrementation += 1
        while clean_table[number - 2] < 10:
            clean_table[number] += clean_table[number - 1]
            clean_table.pop(number - 1)
            table_of_arg[number - 1] += '-' + str(incrementation)
            incrementation += 1
            table_of_arg.pop(number)
    return clean_table, table_of_arg, number, incrementation

def my_tab(clean_table, table_of_arg, clean_scd_tab, number, incrementation):
    for i in range(0, len(table_of_arg)):
        tmp = table_of_arg[i].split('-')
        if len(tmp) != 1:
            table_of_arg[i] = tmp[0] + '-' + tmp[len(tmp) - 1]
        if i + 1 == len(table_of_arg):
            table_of_arg[i] = tmp[0] + '+'
    print("  x\t| ", end="")
    for i in table_of_arg:
        print(i + '\t| ', end="")
    print(" Total")

    tab_validity = []
    for i in clean_table:
        tab_validity.append(i)
    print(" Ox\t| ", end="")
    for number in range(0, len(tab_validity)):
        print(str(tab_validity[number]) + "\t| ", end="")
    print(" 100")
    print(" Tx\t| ", end="")
    for number in range(0, len(clean_scd_tab)):
        print("%.1f" % clean_scd_tab[number] + "\t| ", end="")
    print(" 100")
    return tab_validity

def print_the_table(clean_table, clean_scd_tab, table_of_arg, number, incrementation):
    clean_table, table_of_arg, number, incrementation = my_calc_tab(clean_table, table_of_arg, number, incrementation)
    tab_validity = my_tab(clean_table, table_of_arg, clean_scd_tab, number, incrementation)
    return tab_validity, clean_scd_tab

def first_nbr(tab, binomial):
    clean_scd_tab = []
    r = 0
    for number in range(0, len(tab) - 1):
        result = 100 * combinaison(number, 100) * pow(binomial, number) * pow((1 - binomial), 100 - number)
        r += result
        clean_scd_tab.append(result)
    clean_scd_tab.append(100 - r)
    return clean_scd_tab

def calcul_validity(tab_validity, clean_scd_tab):
    sum = soustration(tab_validity, clean_scd_tab)
    print("Chi-squared:\t\t\t%.3f"%sum)
    degr = len(tab_validity) - 2
    print("Degrees of freedom:\t\t{}".format(degr))
    print("Fit validity:\t\t\t" + check_correct(sum, degr))
    exit(0)

def main():
    tab = check_errors()
    binomial = param_loi_binomial(tab)
    TX = first_nbr(tab, binomial)
    clean_table, clean_scd_tab, table_of_arg, number, incrementation = main_loop(tab, TX)
    tab_validity, clean_scd_tab = print_the_table(clean_table, clean_scd_tab, table_of_arg, number, incrementation)
    print("Distribution:\t\t\tB(100, %.4f)" % binomial)
    calcul_validity(tab_validity, clean_scd_tab)
    return 0

main()
